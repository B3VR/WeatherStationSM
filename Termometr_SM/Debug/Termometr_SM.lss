
Termometr_SM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000920  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000920  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000182b  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af6  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c31  00000000  00000000  00002e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055c  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000efa  00000000  00000000  000041f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000050ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1f 04 	call	0x83e	; 0x83e <main>
  8e:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <dhtxxreadb>:
- 50us of sync impulse
- 28us / 70us data impulse
*/

static uint8_t dhtxxreadb( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *dest )
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	dc 01       	movw	r26, r24
  a0:	fa 01       	movw	r30, r20
	uint8_t sreg = SREG; //Backup status register
  a2:	5f b7       	in	r21, 0x3f	; 63
	uint8_t data = 0;
	uint8_t timeoutcnt = 0;
	uint8_t i = 0;

	//Disable interrupts
	cli( );
  a4:	f8 94       	cli

	//Turn pin into input
	*direction &= ~mask;
  a6:	eb 01       	movw	r28, r22
  a8:	38 81       	ld	r19, Y
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	39 23       	and	r19, r25
  b0:	38 83       	st	Y, r19
	*port &= ~mask;
  b2:	8c 91       	ld	r24, X
  b4:	98 23       	and	r25, r24
  b6:	9c 93       	st	X, r25

	//Get 8 bits
	for ( i = 128; i; i >>= 1 )
  b8:	30 e8       	ldi	r19, 0x80	; 128
*/

static uint8_t dhtxxreadb( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *dest )
{
	uint8_t sreg = SREG; //Backup status register
	uint8_t data = 0;
  ba:	40 e0       	ldi	r20, 0x00	; 0
	//Turn pin into input
	*direction &= ~mask;
	*port &= ~mask;

	//Get 8 bits
	for ( i = 128; i; i >>= 1 )
  bc:	2a c0       	rjmp	.+84     	; 0x112 <dhtxxreadb+0x7c>
	{
		//Wait for the sync part to finish
		timeoutcnt = 0;
		while ( !( *portin & mask ) )
		{
			if ( timeoutcnt++ > DHTXX_TIMEOUT )
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 0f       	add	r24, r25
  c2:	9d 33       	cpi	r25, 0x3D	; 61
  c4:	18 f0       	brcs	.+6      	; 0xcc <dhtxxreadb+0x36>
			{
				SREG = sreg;
  c6:	5f bf       	out	0x3f, r21	; 63
				return DHTXX_ERROR_COMM;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	29 c0       	rjmp	.+82     	; 0x11e <dhtxxreadb+0x88>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	d5 e0       	ldi	r29, 0x05	; 5
  ce:	da 95       	dec	r29
  d0:	f1 f7       	brne	.-4      	; 0xce <dhtxxreadb+0x38>
  d2:	00 00       	nop
	{
		//Wait for the sync part to finish
		timeoutcnt = 0;
		while ( !( *portin & mask ) )
		{
			if ( timeoutcnt++ > DHTXX_TIMEOUT )
  d4:	98 2f       	mov	r25, r24
  d6:	01 c0       	rjmp	.+2      	; 0xda <dhtxxreadb+0x44>
  d8:	90 e0       	ldi	r25, 0x00	; 0
	//Get 8 bits
	for ( i = 128; i; i >>= 1 )
	{
		//Wait for the sync part to finish
		timeoutcnt = 0;
		while ( !( *portin & mask ) )
  da:	80 81       	ld	r24, Z
  dc:	82 23       	and	r24, r18
  de:	79 f3       	breq	.-34     	; 0xbe <dhtxxreadb+0x28>
  e0:	80 ea       	ldi	r24, 0xA0	; 160
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <dhtxxreadb+0x4c>
			_delay_us( 1 );
		}

		_delay_us( 30 );

		if ( *portin & mask ) data |= i;
  e6:	80 81       	ld	r24, Z
  e8:	82 23       	and	r24, r18
  ea:	09 f0       	breq	.+2      	; 0xee <dhtxxreadb+0x58>
  ec:	43 2b       	or	r20, r19

		//Wait for the data part to finish
		timeoutcnt = 0;
  ee:	90 e0       	ldi	r25, 0x00	; 0
		while ( *portin & mask )
  f0:	0c c0       	rjmp	.+24     	; 0x10a <dhtxxreadb+0x74>
		{
			if ( timeoutcnt++ > DHTXX_TIMEOUT )
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 0f       	add	r24, r25
  f6:	9d 33       	cpi	r25, 0x3D	; 61
  f8:	18 f0       	brcs	.+6      	; 0x100 <dhtxxreadb+0x6a>
			{
				SREG = sreg;
  fa:	5f bf       	out	0x3f, r21	; 63
				return DHTXX_ERROR_COMM;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0f c0       	rjmp	.+30     	; 0x11e <dhtxxreadb+0x88>
 100:	95 e0       	ldi	r25, 0x05	; 5
 102:	9a 95       	dec	r25
 104:	f1 f7       	brne	.-4      	; 0x102 <dhtxxreadb+0x6c>
 106:	00 00       	nop

		//Wait for the data part to finish
		timeoutcnt = 0;
		while ( *portin & mask )
		{
			if ( timeoutcnt++ > DHTXX_TIMEOUT )
 108:	98 2f       	mov	r25, r24

		if ( *portin & mask ) data |= i;

		//Wait for the data part to finish
		timeoutcnt = 0;
		while ( *portin & mask )
 10a:	80 81       	ld	r24, Z
 10c:	82 23       	and	r24, r18
 10e:	89 f7       	brne	.-30     	; 0xf2 <dhtxxreadb+0x5c>
	//Turn pin into input
	*direction &= ~mask;
	*port &= ~mask;

	//Get 8 bits
	for ( i = 128; i; i >>= 1 )
 110:	36 95       	lsr	r19
 112:	31 11       	cpse	r19, r1
 114:	e1 cf       	rjmp	.-62     	; 0xd8 <dhtxxreadb+0x42>
			}
			_delay_us( 1 );
		}
	}

	*dest = data;
 116:	e8 01       	movw	r28, r16
 118:	48 83       	st	Y, r20

	SREG = sreg;
 11a:	5f bf       	out	0x3f, r21	; 63
	return DHTXX_ERROR_OK;
 11c:	80 e0       	ldi	r24, 0x00	; 0
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <dhtxxread>:

uint8_t dhtxxread( unsigned char dev, volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, int *temperature, int *humidity )
{
 128:	2f 92       	push	r2
 12a:	3f 92       	push	r3
 12c:	4f 92       	push	r4
 12e:	5f 92       	push	r5
 130:	6f 92       	push	r6
 132:	7f 92       	push	r7
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <dhtxxread+0x26>
 14e:	00 d0       	rcall	.+0      	; 0x150 <dhtxxread+0x28>
 150:	1f 92       	push	r1
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	uint8_t sreg = SREG; //Status register backup
 156:	9f b7       	in	r25, 0x3f	; 63
	uint8_t cs = 0; //Checksum
	uint8_t ec = 0;
	uint8_t i;

	//Check if device type is correct
	if ( dev != DHTXX_DHT11 && dev != DHTXX_DHT22 ) return DHTXX_ERROR_OTHER;
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	08 f0       	brcs	.+2      	; 0x15e <dhtxxread+0x36>
 15c:	a7 c0       	rjmp	.+334    	; 0x2ac <dhtxxread+0x184>

	//Send start signal
	*direction &= ~mask;
 15e:	da 01       	movw	r26, r20
 160:	fc 91       	ld	r31, X
 162:	e0 2f       	mov	r30, r16
 164:	e0 95       	com	r30
 166:	fe 23       	and	r31, r30
 168:	fc 93       	st	X, r31
	*port &= ~mask;
 16a:	db 01       	movw	r26, r22
 16c:	fc 91       	ld	r31, X
 16e:	fe 23       	and	r31, r30
 170:	fc 93       	st	X, r31
	*direction |= mask;
 172:	da 01       	movw	r26, r20
 174:	fc 91       	ld	r31, X
 176:	f0 2b       	or	r31, r16
 178:	fc 93       	st	X, r31

	//Adjust start signal time for DHT11 and DHT22
	if ( dev == DHTXX_DHT22 )
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	39 f4       	brne	.+14     	; 0x18c <dhtxxread+0x64>
 17e:	af ec       	ldi	r26, 0xCF	; 207
 180:	b7 e0       	ldi	r27, 0x07	; 7
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <dhtxxread+0x5a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <dhtxxread+0x60>
 188:	00 00       	nop
 18a:	09 c0       	rjmp	.+18     	; 0x19e <dhtxxread+0x76>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	bf ef       	ldi	r27, 0xFF	; 255
 18e:	f0 ee       	ldi	r31, 0xE0	; 224
 190:	a0 e0       	ldi	r26, 0x00	; 0
 192:	b1 50       	subi	r27, 0x01	; 1
 194:	f0 40       	sbci	r31, 0x00	; 0
 196:	a0 40       	sbci	r26, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <dhtxxread+0x6a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <dhtxxread+0x74>
 19c:	00 00       	nop
		_delay_us( 500 );
	else
		_delay_ms( 18 );

	//Turn pin into input, disable interrupts and wait for acknowledgement
	cli( );
 19e:	f8 94       	cli
	*direction &= ~mask;
 1a0:	da 01       	movw	r26, r20
 1a2:	fc 91       	ld	r31, X
 1a4:	ef 23       	and	r30, r31
 1a6:	ec 93       	st	X, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	e7 e1       	ldi	r30, 0x17	; 23
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <dhtxxread+0x84>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <dhtxxread+0x8a>
 1b2:	00 00       	nop
	_delay_us( 30 + 40 );

	//Communication check 1
	if ( *portin & mask )
 1b4:	d9 01       	movw	r26, r18
 1b6:	5c 90       	ld	r5, X
 1b8:	50 22       	and	r5, r16
 1ba:	21 f0       	breq	.+8      	; 0x1c4 <dhtxxread+0x9c>
	{
		SREG = sreg;
 1bc:	9f bf       	out	0x3f, r25	; 63
		return DHTXX_ERROR_COMM;
 1be:	55 24       	eor	r5, r5
 1c0:	53 94       	inc	r5
 1c2:	7e c0       	rjmp	.+252    	; 0x2c0 <dhtxxread+0x198>
 1c4:	ef e3       	ldi	r30, 0x3F	; 63
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <dhtxxread+0xa0>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <dhtxxread+0xa6>
 1ce:	00 00       	nop
	}

	_delay_us( 80 );

	//Communication check 2
	if ( !( *portin & mask ) )
 1d0:	d9 01       	movw	r26, r18
 1d2:	ec 91       	ld	r30, X
 1d4:	e0 23       	and	r30, r16
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <dhtxxread+0xb8>
	{
		SREG = sreg;
 1d8:	9f bf       	out	0x3f, r25	; 63
		return DHTXX_ERROR_COMM;
 1da:	55 24       	eor	r5, r5
 1dc:	53 94       	inc	r5
 1de:	70 c0       	rjmp	.+224    	; 0x2c0 <dhtxxread+0x198>
 1e0:	40 2e       	mov	r4, r16
 1e2:	39 01       	movw	r6, r18
 1e4:	5a 01       	movw	r10, r20
 1e6:	4b 01       	movw	r8, r22
 1e8:	38 2e       	mov	r3, r24
	}

	//Restore interrupts status
	SREG = sreg;
 1ea:	9f bf       	out	0x3f, r25	; 63
 1ec:	b5 ed       	ldi	r27, 0xD5	; 213
 1ee:	ba 95       	dec	r27
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <dhtxxread+0xc6>
 1f2:	00 00       	nop
	_delay_us( 40 );

	//Read data from sensor
	for ( i = 0; i < 5; i++ )
 1f4:	21 2c       	mov	r2, r1
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <dhtxxread+0xee>
	{
		ec = dhtxxreadb( port, direction, portin, mask, &data[i] );
 1f8:	01 e0       	ldi	r16, 0x01	; 1
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	0c 0f       	add	r16, r28
 1fe:	1d 1f       	adc	r17, r29
 200:	02 0d       	add	r16, r2
 202:	11 1d       	adc	r17, r1
 204:	24 2d       	mov	r18, r4
 206:	a3 01       	movw	r20, r6
 208:	b5 01       	movw	r22, r10
 20a:	c4 01       	movw	r24, r8
 20c:	0e 94 4b 00 	call	0x96	; 0x96 <dhtxxreadb>
		if ( ec ) return ec;
 210:	81 11       	cpse	r24, r1
 212:	51 c0       	rjmp	.+162    	; 0x2b6 <dhtxxread+0x18e>
	//Restore interrupts status
	SREG = sreg;
	_delay_us( 40 );

	//Read data from sensor
	for ( i = 0; i < 5; i++ )
 214:	23 94       	inc	r2
 216:	e4 e0       	ldi	r30, 0x04	; 4
 218:	e2 15       	cp	r30, r2
 21a:	70 f7       	brcc	.-36     	; 0x1f8 <dhtxxread+0xd0>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	09 c0       	rjmp	.+18     	; 0x234 <dhtxxread+0x10c>
		if ( ec ) return ec;
	}

	//Checksum calculation
	for ( i = 0; i < 4; i++ )
		cs += data[i];
 222:	e1 e0       	ldi	r30, 0x01	; 1
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	e8 0f       	add	r30, r24
 22c:	f1 1d       	adc	r31, r1
 22e:	20 81       	ld	r18, Z
 230:	92 0f       	add	r25, r18
		ec = dhtxxreadb( port, direction, portin, mask, &data[i] );
		if ( ec ) return ec;
	}

	//Checksum calculation
	for ( i = 0; i < 4; i++ )
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	84 30       	cpi	r24, 0x04	; 4
 236:	a8 f3       	brcs	.-22     	; 0x222 <dhtxxread+0xfa>
		cs += data[i];
	if ( cs != data[4] )
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	98 13       	cpse	r25, r24
 23c:	3e c0       	rjmp	.+124    	; 0x2ba <dhtxxread+0x192>
		return DHTXX_ERROR_CHECKSUM;

	//Output values
	if ( dev == DHTXX_DHT22 ) //DHT22
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	3f 12       	cpse	r3, r31
 242:	13 c0       	rjmp	.+38     	; 0x26a <dhtxxread+0x142>
	{
		//Will return humidity*10 and temperature*10
		*humidity = data[0] << 8 | data[1];
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	98 2f       	mov	r25, r24
 24a:	88 27       	eor	r24, r24
 24c:	2a 81       	ldd	r18, Y+2	; 0x02
 24e:	82 2b       	or	r24, r18
 250:	d6 01       	movw	r26, r12
 252:	8d 93       	st	X+, r24
 254:	9c 93       	st	X, r25
		*temperature = data[2] << 8 | data[3];
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	98 2f       	mov	r25, r24
 25c:	88 27       	eor	r24, r24
 25e:	2c 81       	ldd	r18, Y+4	; 0x04
 260:	82 2b       	or	r24, r18
 262:	f7 01       	movw	r30, r14
 264:	91 83       	std	Z+1, r25	; 0x01
 266:	80 83       	st	Z, r24
 268:	2b c0       	rjmp	.+86     	; 0x2c0 <dhtxxread+0x198>
	}
	else //DHT11
	{
		*humidity = data[0] * 10;
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	82 0f       	add	r24, r18
 282:	93 1f       	adc	r25, r19
 284:	d6 01       	movw	r26, r12
 286:	8d 93       	st	X+, r24
 288:	9c 93       	st	X, r25
		*temperature = data[2] * 10;
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	9c 01       	movw	r18, r24
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	82 0f       	add	r24, r18
 2a2:	93 1f       	adc	r25, r19
 2a4:	f7 01       	movw	r30, r14
 2a6:	91 83       	std	Z+1, r25	; 0x01
 2a8:	80 83       	st	Z, r24
 2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <dhtxxread+0x198>
	uint8_t cs = 0; //Checksum
	uint8_t ec = 0;
	uint8_t i;

	//Check if device type is correct
	if ( dev != DHTXX_DHT11 && dev != DHTXX_DHT22 ) return DHTXX_ERROR_OTHER;
 2ac:	0f 2e       	mov	r0, r31
 2ae:	f3 e0       	ldi	r31, 0x03	; 3
 2b0:	5f 2e       	mov	r5, r31
 2b2:	f0 2d       	mov	r31, r0
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <dhtxxread+0x198>

	//Read data from sensor
	for ( i = 0; i < 5; i++ )
	{
		ec = dhtxxreadb( port, direction, portin, mask, &data[i] );
		if ( ec ) return ec;
 2b6:	58 2e       	mov	r5, r24
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <dhtxxread+0x198>

	//Checksum calculation
	for ( i = 0; i < 4; i++ )
		cs += data[i];
	if ( cs != data[4] )
		return DHTXX_ERROR_CHECKSUM;
 2ba:	68 94       	set
 2bc:	55 24       	eor	r5, r5
 2be:	51 f8       	bld	r5, 1
		*humidity = data[0] * 10;
		*temperature = data[2] * 10;
	}

	return DHTXX_ERROR_OK;
}
 2c0:	85 2d       	mov	r24, r5
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	7f 90       	pop	r7
 2e6:	6f 90       	pop	r6
 2e8:	5f 90       	pop	r5
 2ea:	4f 90       	pop	r4
 2ec:	3f 90       	pop	r3
 2ee:	2f 90       	pop	r2
 2f0:	08 95       	ret

000002f2 <dhtxxconvert>:

uint8_t dhtxxconvert( unsigned char dev, volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 2f2:	0f 93       	push	r16
	//Requests DHTxx device, but does not read the data (simply triggers conversion)

	uint8_t sreg = SREG; //Status register backup
 2f4:	9f b7       	in	r25, 0x3f	; 63

	//Check if device type is correct
	if ( dev != DHTXX_DHT11 && dev != DHTXX_DHT22 ) return DHTXX_ERROR_OTHER;
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	a0 f5       	brcc	.+104    	; 0x362 <dhtxxconvert+0x70>

	//Send start signal
	*direction &= ~mask;
 2fa:	da 01       	movw	r26, r20
 2fc:	fc 91       	ld	r31, X
 2fe:	e0 2f       	mov	r30, r16
 300:	e0 95       	com	r30
 302:	fe 23       	and	r31, r30
 304:	fc 93       	st	X, r31
	*port &= ~mask;
 306:	db 01       	movw	r26, r22
 308:	fc 91       	ld	r31, X
 30a:	fe 23       	and	r31, r30
 30c:	fc 93       	st	X, r31
	*direction |= mask;
 30e:	da 01       	movw	r26, r20
 310:	6c 91       	ld	r22, X
 312:	60 2b       	or	r22, r16
 314:	6c 93       	st	X, r22

	//Adjust start signal time for DHT11 and DHT22
	if ( dev == DHTXX_DHT22 )
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	39 f4       	brne	.+14     	; 0x328 <dhtxxconvert+0x36>
 31a:	af ec       	ldi	r26, 0xCF	; 207
 31c:	b7 e0       	ldi	r27, 0x07	; 7
 31e:	11 97       	sbiw	r26, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <dhtxxconvert+0x2c>
 322:	00 c0       	rjmp	.+0      	; 0x324 <dhtxxconvert+0x32>
 324:	00 00       	nop
 326:	09 c0       	rjmp	.+18     	; 0x33a <dhtxxconvert+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	bf ef       	ldi	r27, 0xFF	; 255
 32a:	f0 ee       	ldi	r31, 0xE0	; 224
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	b1 50       	subi	r27, 0x01	; 1
 330:	f0 40       	sbci	r31, 0x00	; 0
 332:	60 40       	sbci	r22, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <dhtxxconvert+0x3c>
 336:	00 c0       	rjmp	.+0      	; 0x338 <dhtxxconvert+0x46>
 338:	00 00       	nop
		_delay_us( 500 );
	else
		_delay_ms( 18 );

	//Turn pin into input, disable interrupts and wait for acknowledgement
	cli( );
 33a:	f8 94       	cli
	*direction &= ~mask;
 33c:	da 01       	movw	r26, r20
 33e:	8c 91       	ld	r24, X
 340:	e8 23       	and	r30, r24
 342:	ec 93       	st	X, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	e7 e1       	ldi	r30, 0x17	; 23
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <dhtxxconvert+0x56>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <dhtxxconvert+0x5c>
 34e:	00 00       	nop
	_delay_us( 30 + 40 );

	//Communication check 1
	if ( *portin & mask )
 350:	d9 01       	movw	r26, r18
 352:	8c 91       	ld	r24, X
 354:	80 23       	and	r24, r16
 356:	19 f0       	breq	.+6      	; 0x35e <dhtxxconvert+0x6c>
	{
		SREG = sreg;
 358:	9f bf       	out	0x3f, r25	; 63
		return DHTXX_ERROR_COMM;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	03 c0       	rjmp	.+6      	; 0x364 <dhtxxconvert+0x72>
	}

	SREG = sreg;
 35e:	9f bf       	out	0x3f, r25	; 63
	return DHTXX_ERROR_OK;
 360:	01 c0       	rjmp	.+2      	; 0x364 <dhtxxconvert+0x72>
	//Requests DHTxx device, but does not read the data (simply triggers conversion)

	uint8_t sreg = SREG; //Status register backup

	//Check if device type is correct
	if ( dev != DHTXX_DHT11 && dev != DHTXX_DHT22 ) return DHTXX_ERROR_OTHER;
 362:	83 e0       	ldi	r24, 0x03	; 3
		return DHTXX_ERROR_COMM;
	}

	SREG = sreg;
	return DHTXX_ERROR_OK;
}
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <lcd_write>:
  {
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
      lcd_putc(c);
  }
 368:	66 23       	and	r22, r22
 36a:	21 f0       	breq	.+8      	; 0x374 <lcd_write+0xc>
 36c:	95 b1       	in	r25, 0x05	; 5
 36e:	91 60       	ori	r25, 0x01	; 1
 370:	95 b9       	out	0x05, r25	; 5
 372:	03 c0       	rjmp	.+6      	; 0x37a <lcd_write+0x12>
 374:	95 b1       	in	r25, 0x05	; 5
 376:	9e 7f       	andi	r25, 0xFE	; 254
 378:	95 b9       	out	0x05, r25	; 5
 37a:	88 23       	and	r24, r24
 37c:	24 f4       	brge	.+8      	; 0x386 <lcd_write+0x1e>
 37e:	95 b1       	in	r25, 0x05	; 5
 380:	90 62       	ori	r25, 0x20	; 32
 382:	95 b9       	out	0x05, r25	; 5
 384:	03 c0       	rjmp	.+6      	; 0x38c <lcd_write+0x24>
 386:	95 b1       	in	r25, 0x05	; 5
 388:	9f 7d       	andi	r25, 0xDF	; 223
 38a:	95 b9       	out	0x05, r25	; 5
 38c:	86 ff       	sbrs	r24, 6
 38e:	04 c0       	rjmp	.+8      	; 0x398 <lcd_write+0x30>
 390:	95 b1       	in	r25, 0x05	; 5
 392:	90 61       	ori	r25, 0x10	; 16
 394:	95 b9       	out	0x05, r25	; 5
 396:	03 c0       	rjmp	.+6      	; 0x39e <lcd_write+0x36>
 398:	95 b1       	in	r25, 0x05	; 5
 39a:	9f 7e       	andi	r25, 0xEF	; 239
 39c:	95 b9       	out	0x05, r25	; 5
 39e:	85 ff       	sbrs	r24, 5
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <lcd_write+0x42>
 3a2:	95 b1       	in	r25, 0x05	; 5
 3a4:	98 60       	ori	r25, 0x08	; 8
 3a6:	95 b9       	out	0x05, r25	; 5
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <lcd_write+0x48>
 3aa:	95 b1       	in	r25, 0x05	; 5
 3ac:	97 7f       	andi	r25, 0xF7	; 247
 3ae:	95 b9       	out	0x05, r25	; 5
 3b0:	84 ff       	sbrs	r24, 4
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <lcd_write+0x54>
 3b4:	95 b1       	in	r25, 0x05	; 5
 3b6:	94 60       	ori	r25, 0x04	; 4
 3b8:	95 b9       	out	0x05, r25	; 5
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <lcd_write+0x5a>
 3bc:	95 b1       	in	r25, 0x05	; 5
 3be:	9b 7f       	andi	r25, 0xFB	; 251
 3c0:	95 b9       	out	0x05, r25	; 5
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <lcd_write+0x5c>
 3c4:	95 b1       	in	r25, 0x05	; 5
 3c6:	92 60       	ori	r25, 0x02	; 2
 3c8:	95 b9       	out	0x05, r25	; 5
 3ca:	92 e0       	ldi	r25, 0x02	; 2
 3cc:	9a 95       	dec	r25
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_write+0x64>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <lcd_write+0x6a>
 3d2:	95 b1       	in	r25, 0x05	; 5
 3d4:	9d 7f       	andi	r25, 0xFD	; 253
 3d6:	95 b9       	out	0x05, r25	; 5
 3d8:	83 ff       	sbrs	r24, 3
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <lcd_write+0x7c>
 3dc:	95 b1       	in	r25, 0x05	; 5
 3de:	90 62       	ori	r25, 0x20	; 32
 3e0:	95 b9       	out	0x05, r25	; 5
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <lcd_write+0x82>
 3e4:	95 b1       	in	r25, 0x05	; 5
 3e6:	9f 7d       	andi	r25, 0xDF	; 223
 3e8:	95 b9       	out	0x05, r25	; 5
 3ea:	82 ff       	sbrs	r24, 2
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <lcd_write+0x8e>
 3ee:	95 b1       	in	r25, 0x05	; 5
 3f0:	90 61       	ori	r25, 0x10	; 16
 3f2:	95 b9       	out	0x05, r25	; 5
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <lcd_write+0x94>
 3f6:	95 b1       	in	r25, 0x05	; 5
 3f8:	9f 7e       	andi	r25, 0xEF	; 239
 3fa:	95 b9       	out	0x05, r25	; 5
 3fc:	81 ff       	sbrs	r24, 1
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 400:	95 b1       	in	r25, 0x05	; 5
 402:	98 60       	ori	r25, 0x08	; 8
 404:	95 b9       	out	0x05, r25	; 5
 406:	03 c0       	rjmp	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	95 b1       	in	r25, 0x05	; 5
 40a:	97 7f       	andi	r25, 0xF7	; 247
 40c:	95 b9       	out	0x05, r25	; 5
 40e:	80 ff       	sbrs	r24, 0
 410:	04 c0       	rjmp	.+8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 412:	95 b1       	in	r25, 0x05	; 5
 414:	94 60       	ori	r25, 0x04	; 4
 416:	95 b9       	out	0x05, r25	; 5
 418:	03 c0       	rjmp	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41a:	95 b1       	in	r25, 0x05	; 5
 41c:	9b 7f       	andi	r25, 0xFB	; 251
 41e:	95 b9       	out	0x05, r25	; 5
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	95 b1       	in	r25, 0x05	; 5
 424:	92 60       	ori	r25, 0x02	; 2
 426:	95 b9       	out	0x05, r25	; 5
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	9a 95       	dec	r25
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	95 b1       	in	r25, 0x05	; 5
 432:	9d 7f       	andi	r25, 0xFD	; 253
 434:	95 b9       	out	0x05, r25	; 5
 436:	95 b1       	in	r25, 0x05	; 5
 438:	90 62       	ori	r25, 0x20	; 32
 43a:	95 b9       	out	0x05, r25	; 5
 43c:	95 b1       	in	r25, 0x05	; 5
 43e:	90 61       	ori	r25, 0x10	; 16
 440:	95 b9       	out	0x05, r25	; 5
 442:	95 b1       	in	r25, 0x05	; 5
 444:	98 60       	ori	r25, 0x08	; 8
 446:	95 b9       	out	0x05, r25	; 5
 448:	95 b1       	in	r25, 0x05	; 5
 44a:	94 60       	ori	r25, 0x04	; 4
 44c:	95 b9       	out	0x05, r25	; 5
 44e:	61 11       	cpse	r22, r1
 450:	09 c0       	rjmp	.+18     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 452:	84 30       	cpi	r24, 0x04	; 4
 454:	38 f4       	brcc	.+14     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 456:	8f e9       	ldi	r24, 0x9F	; 159
 458:	99 e1       	ldi	r25, 0x19	; 25
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 460:	00 00       	nop
 462:	08 95       	ret
 464:	95 ed       	ldi	r25, 0xD5	; 213
 466:	9a 95       	dec	r25
 468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46a:	00 00       	nop
 46c:	08 95       	ret

0000046e <lcd_command>:
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_write>
 474:	08 95       	ret

00000476 <lcd_goto>:
 476:	80 58       	subi	r24, 0x80	; 128
 478:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_command>
 47c:	08 95       	ret

0000047e <lcd_clrscr>:
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_command>
 484:	08 95       	ret

00000486 <lcd_putc>:
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_write>
 48c:	08 95       	ret

0000048e <lcd_puts>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	fc 01       	movw	r30, r24
 494:	03 c0       	rjmp	.+6      	; 0x49c <lcd_puts+0xe>
 496:	0e 94 43 02 	call	0x486	; 0x486 <lcd_putc>
 49a:	fe 01       	movw	r30, r28
 49c:	ef 01       	movw	r28, r30
 49e:	21 96       	adiw	r28, 0x01	; 1
 4a0:	80 81       	ld	r24, Z
 4a2:	81 11       	cpse	r24, r1
 4a4:	f8 cf       	rjmp	.-16     	; 0x496 <lcd_puts+0x8>
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <lcd_init>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 4ac:	84 b1       	in	r24, 0x04	; 4
 4ae:	82 60       	ori	r24, 0x02	; 2
 4b0:	84 b9       	out	0x04, r24	; 4
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 4b2:	84 b1       	in	r24, 0x04	; 4
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	84 b9       	out	0x04, r24	; 4
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 4b8:	84 b1       	in	r24, 0x04	; 4
 4ba:	80 62       	ori	r24, 0x20	; 32
 4bc:	84 b9       	out	0x04, r24	; 4
    lcd_db6_ddr_high();
 4be:	84 b1       	in	r24, 0x04	; 4
 4c0:	80 61       	ori	r24, 0x10	; 16
 4c2:	84 b9       	out	0x04, r24	; 4
    lcd_db5_ddr_high();
 4c4:	84 b1       	in	r24, 0x04	; 4
 4c6:	88 60       	ori	r24, 0x08	; 8
 4c8:	84 b9       	out	0x04, r24	; 4
    lcd_db4_ddr_high();
 4ca:	84 b1       	in	r24, 0x04	; 4
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	84 b9       	out	0x04, r24	; 4
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 4d0:	85 b1       	in	r24, 0x05	; 5
 4d2:	8d 7f       	andi	r24, 0xFD	; 253
 4d4:	85 b9       	out	0x05, r24	; 5
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 4d6:	85 b1       	in	r24, 0x05	; 5
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	85 b9       	out	0x05, r24	; 5
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 4dc:	85 b1       	in	r24, 0x05	; 5
 4de:	80 62       	ori	r24, 0x20	; 32
 4e0:	85 b9       	out	0x05, r24	; 5
    lcd_db6_port_high();
 4e2:	85 b1       	in	r24, 0x05	; 5
 4e4:	80 61       	ori	r24, 0x10	; 16
 4e6:	85 b9       	out	0x05, r24	; 5
    lcd_db5_port_high();
 4e8:	85 b1       	in	r24, 0x05	; 5
 4ea:	88 60       	ori	r24, 0x08	; 8
 4ec:	85 b9       	out	0x05, r24	; 5
    lcd_db4_port_high();
 4ee:	85 b1       	in	r24, 0x05	; 5
 4f0:	84 60       	ori	r24, 0x04	; 4
 4f2:	85 b9       	out	0x05, r24	; 5
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 4f4:	8f e5       	ldi	r24, 0x5F	; 95
 4f6:	9a ee       	ldi	r25, 0xEA	; 234
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_init+0x4c>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <lcd_init+0x52>
 4fe:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 500:	85 b1       	in	r24, 0x05	; 5
 502:	8f 7d       	andi	r24, 0xDF	; 223
 504:	85 b9       	out	0x05, r24	; 5
    lcd_db6_port_low();
 506:	85 b1       	in	r24, 0x05	; 5
 508:	8f 7e       	andi	r24, 0xEF	; 239
 50a:	85 b9       	out	0x05, r24	; 5
    Delay_ns(100);
 50c:	00 c0       	rjmp	.+0      	; 0x50e <lcd_init+0x62>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 50e:	85 b1       	in	r24, 0x05	; 5
 510:	82 60       	ori	r24, 0x02	; 2
 512:	85 b9       	out	0x05, r24	; 5
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	9a 95       	dec	r25
 518:	f1 f7       	brne	.-4      	; 0x516 <lcd_init+0x6a>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <lcd_init+0x70>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 51c:	85 b1       	in	r24, 0x05	; 5
 51e:	8d 7f       	andi	r24, 0xFD	; 253
 520:	85 b9       	out	0x05, r24	; 5
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 522:	8f e0       	ldi	r24, 0x0F	; 15
 524:	90 e4       	ldi	r25, 0x40	; 64
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <lcd_init+0x7a>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd_init+0x80>
 52c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 52e:	85 b1       	in	r24, 0x05	; 5
 530:	82 60       	ori	r24, 0x02	; 2
 532:	85 b9       	out	0x05, r24	; 5
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	9a 95       	dec	r25
 538:	f1 f7       	brne	.-4      	; 0x536 <lcd_init+0x8a>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_init+0x90>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 53c:	85 b1       	in	r24, 0x05	; 5
 53e:	8d 7f       	andi	r24, 0xFD	; 253
 540:	85 b9       	out	0x05, r24	; 5

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 542:	8f e8       	ldi	r24, 0x8F	; 143
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <lcd_init+0x9a>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <lcd_init+0xa0>
 54c:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 54e:	85 b1       	in	r24, 0x05	; 5
 550:	82 60       	ori	r24, 0x02	; 2
 552:	85 b9       	out	0x05, r24	; 5
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	9a 95       	dec	r25
 558:	f1 f7       	brne	.-4      	; 0x556 <lcd_init+0xaa>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <lcd_init+0xb0>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 55c:	85 b1       	in	r24, 0x05	; 5
 55e:	8d 7f       	andi	r24, 0xFD	; 253
 560:	85 b9       	out	0x05, r24	; 5

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 562:	85 ed       	ldi	r24, 0xD5	; 213
 564:	8a 95       	dec	r24
 566:	f1 f7       	brne	.-4      	; 0x564 <lcd_init+0xb8>
 568:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 56a:	85 b1       	in	r24, 0x05	; 5
 56c:	8b 7f       	andi	r24, 0xFB	; 251
 56e:	85 b9       	out	0x05, r24	; 5
      Delay_ns(100);
 570:	00 c0       	rjmp	.+0      	; 0x572 <lcd_init+0xc6>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 572:	85 b1       	in	r24, 0x05	; 5
 574:	82 60       	ori	r24, 0x02	; 2
 576:	85 b9       	out	0x05, r24	; 5
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	9a 95       	dec	r25
 57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_init+0xce>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <lcd_init+0xd4>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 580:	85 b1       	in	r24, 0x05	; 5
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	85 b9       	out	0x05, r24	; 5
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 586:	85 ed       	ldi	r24, 0xD5	; 213
 588:	8a 95       	dec	r24
 58a:	f1 f7       	brne	.-4      	; 0x588 <lcd_init+0xdc>
 58c:	00 00       	nop

      lcd_db4_port_low();
 58e:	85 b1       	in	r24, 0x05	; 5
 590:	8b 7f       	andi	r24, 0xFB	; 251
 592:	85 b9       	out	0x05, r24	; 5
      Delay_ns(100);
 594:	00 c0       	rjmp	.+0      	; 0x596 <lcd_init+0xea>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 596:	85 b1       	in	r24, 0x05	; 5
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	85 b9       	out	0x05, r24	; 5
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 59c:	92 e0       	ldi	r25, 0x02	; 2
 59e:	9a 95       	dec	r25
 5a0:	f1 f7       	brne	.-4      	; 0x59e <lcd_init+0xf2>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <lcd_init+0xf8>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 5a4:	85 b1       	in	r24, 0x05	; 5
 5a6:	8d 7f       	andi	r24, 0xFD	; 253
 5a8:	85 b9       	out	0x05, r24	; 5
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	8a 95       	dec	r24
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd_init+0x100>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <lcd_init+0x106>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 5b2:	85 b1       	in	r24, 0x05	; 5
 5b4:	80 62       	ori	r24, 0x20	; 32
 5b6:	85 b9       	out	0x05, r24	; 5
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <lcd_init+0x10e>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 5ba:	85 b1       	in	r24, 0x05	; 5
 5bc:	82 60       	ori	r24, 0x02	; 2
 5be:	85 b9       	out	0x05, r24	; 5
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 5c0:	92 e0       	ldi	r25, 0x02	; 2
 5c2:	9a 95       	dec	r25
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <lcd_init+0x116>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <lcd_init+0x11c>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 5c8:	85 b1       	in	r24, 0x05	; 5
 5ca:	8d 7f       	andi	r24, 0xFD	; 253
 5cc:	85 b9       	out	0x05, r24	; 5

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 5ce:	85 ed       	ldi	r24, 0xD5	; 213
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <lcd_init+0x124>
 5d4:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_command>

    //Display Clear
    lcd_clrscr();
 5dc:	0e 94 3f 02 	call	0x47e	; 0x47e <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 5e0:	86 e0       	ldi	r24, 0x06	; 6
 5e2:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 5e6:	8c e0       	ldi	r24, 0x0C	; 12
 5e8:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_command>
 5ec:	08 95       	ret

000005ee <bodyTemperature>:
    }
}

void bodyTemperature()
{
	lcd_clrscr();
 5ee:	0e 94 3f 02 	call	0x47e	; 0x47e <lcd_clrscr>
	lcd_puts("Przystaw czolo");
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	lcd_goto(0x40);
 5fa:	80 e4       	ldi	r24, 0x40	; 64
 5fc:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_goto>
	lcd_puts("do czujnika");
 600:	8f e0       	ldi	r24, 0x0F	; 15
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	87 ea       	ldi	r24, 0xA7	; 167
 60c:	91 e6       	ldi	r25, 0x61	; 97
 60e:	21 50       	subi	r18, 0x01	; 1
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	90 40       	sbci	r25, 0x00	; 0
 614:	e1 f7       	brne	.-8      	; 0x60e <bodyTemperature+0x20>
 616:	00 c0       	rjmp	.+0      	; 0x618 <bodyTemperature+0x2a>
 618:	00 00       	nop
	_delay_ms(2000);
	lcd_clrscr();
 61a:	0e 94 3f 02 	call	0x47e	; 0x47e <lcd_clrscr>
	lcd_puts("3 ");
 61e:	8b e1       	ldi	r24, 0x1B	; 27
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	83 ed       	ldi	r24, 0xD3	; 211
 62a:	90 e3       	ldi	r25, 0x30	; 48
 62c:	21 50       	subi	r18, 0x01	; 1
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	90 40       	sbci	r25, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <bodyTemperature+0x3e>
 634:	00 c0       	rjmp	.+0      	; 0x636 <bodyTemperature+0x48>
 636:	00 00       	nop
	_delay_ms(1000);
	lcd_puts("2 ");
 638:	8e e1       	ldi	r24, 0x1E	; 30
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
 640:	2f ef       	ldi	r18, 0xFF	; 255
 642:	83 ed       	ldi	r24, 0xD3	; 211
 644:	90 e3       	ldi	r25, 0x30	; 48
 646:	21 50       	subi	r18, 0x01	; 1
 648:	80 40       	sbci	r24, 0x00	; 0
 64a:	90 40       	sbci	r25, 0x00	; 0
 64c:	e1 f7       	brne	.-8      	; 0x646 <bodyTemperature+0x58>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <bodyTemperature+0x62>
 650:	00 00       	nop
	_delay_ms(1000);
	lcd_puts("1");
 652:	81 e2       	ldi	r24, 0x21	; 33
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
 65a:	2f ef       	ldi	r18, 0xFF	; 255
 65c:	83 ed       	ldi	r24, 0xD3	; 211
 65e:	90 e3       	ldi	r25, 0x30	; 48
 660:	21 50       	subi	r18, 0x01	; 1
 662:	80 40       	sbci	r24, 0x00	; 0
 664:	90 40       	sbci	r25, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <bodyTemperature+0x72>
 668:	00 c0       	rjmp	.+0      	; 0x66a <bodyTemperature+0x7c>
 66a:	00 00       	nop
 66c:	08 95       	ret

0000066e <LED_on>:
	}
}

void LED_on(char* color)
{
	if(color == "red")
 66e:	21 e0       	ldi	r18, 0x01	; 1
 670:	83 32       	cpi	r24, 0x23	; 35
 672:	92 07       	cpc	r25, r18
 674:	21 f4       	brne	.+8      	; 0x67e <LED_on+0x10>
	{
		PORTD |= (1<<5);
 676:	8b b1       	in	r24, 0x0b	; 11
 678:	80 62       	ori	r24, 0x20	; 32
 67a:	8b b9       	out	0x0b, r24	; 11
 67c:	08 95       	ret
	}else if (color == "green")
 67e:	87 52       	subi	r24, 0x27	; 39
 680:	91 40       	sbci	r25, 0x01	; 1
 682:	19 f4       	brne	.+6      	; 0x68a <LED_on+0x1c>
	{
		PORTD |= (1<<4);
 684:	8b b1       	in	r24, 0x0b	; 11
 686:	80 61       	ori	r24, 0x10	; 16
 688:	8b b9       	out	0x0b, r24	; 11
 68a:	08 95       	ret

0000068c <LED_off>:
	}
}

void LED_off(char* color)
{
	if(color == "red")
 68c:	21 e0       	ldi	r18, 0x01	; 1
 68e:	83 32       	cpi	r24, 0x23	; 35
 690:	92 07       	cpc	r25, r18
 692:	21 f4       	brne	.+8      	; 0x69c <LED_off+0x10>
	{
		PORTD &= ~(1<<5);
 694:	8b b1       	in	r24, 0x0b	; 11
 696:	8f 7d       	andi	r24, 0xDF	; 223
 698:	8b b9       	out	0x0b, r24	; 11
 69a:	08 95       	ret
	}else if (color == "green")
 69c:	87 52       	subi	r24, 0x27	; 39
 69e:	91 40       	sbci	r25, 0x01	; 1
 6a0:	19 f4       	brne	.+6      	; 0x6a8 <LED_off+0x1c>
	{
		PORTD &= ~(1<<4);
 6a2:	8b b1       	in	r24, 0x0b	; 11
 6a4:	8f 7e       	andi	r24, 0xEF	; 239
 6a6:	8b b9       	out	0x0b, r24	; 11
 6a8:	08 95       	ret

000006aa <checkHumAndTemperature>:
}

void checkHumAndTemperature(int hum, int temp)
{
	
	if (hum/10 > 60 || hum/10 < 40 || temp/10 > 25 || temp/10 < 18)
 6aa:	80 59       	subi	r24, 0x90	; 144
 6ac:	91 40       	sbci	r25, 0x01	; 1
 6ae:	82 3d       	cpi	r24, 0xD2	; 210
 6b0:	91 05       	cpc	r25, r1
 6b2:	38 f4       	brcc	.+14     	; 0x6c2 <checkHumAndTemperature+0x18>
 6b4:	64 30       	cpi	r22, 0x04	; 4
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	72 07       	cpc	r23, r18
 6ba:	1c f4       	brge	.+6      	; 0x6c2 <checkHumAndTemperature+0x18>
 6bc:	64 3b       	cpi	r22, 0xB4	; 180
 6be:	71 05       	cpc	r23, r1
 6c0:	c4 f5       	brge	.+112    	; 0x732 <checkHumAndTemperature+0x88>
	{
		if ((hum/10 > 60 || hum/10 < 40) && (temp/10 > 25 || temp/10 < 18))
 6c2:	82 3d       	cpi	r24, 0xD2	; 210
 6c4:	91 05       	cpc	r25, r1
 6c6:	a8 f0       	brcs	.+42     	; 0x6f2 <checkHumAndTemperature+0x48>
 6c8:	9b 01       	movw	r18, r22
 6ca:	24 5b       	subi	r18, 0xB4	; 180
 6cc:	31 09       	sbc	r19, r1
 6ce:	20 35       	cpi	r18, 0x50	; 80
 6d0:	31 05       	cpc	r19, r1
 6d2:	78 f0       	brcs	.+30     	; 0x6f2 <checkHumAndTemperature+0x48>
		{
			lcd_goto(15);
 6d4:	8f e0       	ldi	r24, 0x0F	; 15
 6d6:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_goto>
			lcd_puts("!");
 6da:	8d e2       	ldi	r24, 0x2D	; 45
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
			lcd_goto(79);
 6e2:	8f e4       	ldi	r24, 0x4F	; 79
 6e4:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_goto>
			lcd_puts("!");
 6e8:	8d e2       	ldi	r24, 0x2D	; 45
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
 6f0:	17 c0       	rjmp	.+46     	; 0x720 <checkHumAndTemperature+0x76>
		}else if (temp/10 > 25 || temp/10 < 18){
 6f2:	64 5b       	subi	r22, 0xB4	; 180
 6f4:	71 09       	sbc	r23, r1
 6f6:	60 35       	cpi	r22, 0x50	; 80
 6f8:	71 05       	cpc	r23, r1
 6fa:	40 f0       	brcs	.+16     	; 0x70c <checkHumAndTemperature+0x62>
			lcd_goto(15);
 6fc:	8f e0       	ldi	r24, 0x0F	; 15
 6fe:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_goto>
			lcd_puts("!");
 702:	8d e2       	ldi	r24, 0x2D	; 45
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
 70a:	0a c0       	rjmp	.+20     	; 0x720 <checkHumAndTemperature+0x76>
		}else if (hum/10 > 60 || hum/10 < 40){
 70c:	82 3d       	cpi	r24, 0xD2	; 210
 70e:	91 05       	cpc	r25, r1
 710:	38 f0       	brcs	.+14     	; 0x720 <checkHumAndTemperature+0x76>
			lcd_goto(79);
 712:	8f e4       	ldi	r24, 0x4F	; 79
 714:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_goto>
			lcd_puts("!");
 718:	8d e2       	ldi	r24, 0x2D	; 45
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
		}
		
		LED_off("green");
 720:	87 e2       	ldi	r24, 0x27	; 39
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	0e 94 46 03 	call	0x68c	; 0x68c <LED_off>
		LED_on("red");
 728:	83 e2       	ldi	r24, 0x23	; 35
 72a:	91 e0       	ldi	r25, 0x01	; 1
 72c:	0e 94 37 03 	call	0x66e	; 0x66e <LED_on>

void checkHumAndTemperature(int hum, int temp)
{
	
	if (hum/10 > 60 || hum/10 < 40 || temp/10 > 25 || temp/10 < 18)
	{
 730:	08 95       	ret
		
		LED_off("green");
		LED_on("red");
	}else
	{
		LED_on("green");
 732:	87 e2       	ldi	r24, 0x27	; 39
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 37 03 	call	0x66e	; 0x66e <LED_on>
		LED_off("red");
 73a:	83 e2       	ldi	r24, 0x23	; 35
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 46 03 	call	0x68c	; 0x68c <LED_off>
 742:	08 95       	ret

00000744 <weatherStation>:
	lcd_puts("1");
	_delay_ms(1000);	
}

void weatherStation()
{
 744:	cf 92       	push	r12
 746:	df 92       	push	r13
 748:	ef 92       	push	r14
 74a:	ff 92       	push	r15
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	2e 97       	sbiw	r28, 0x0e	; 14
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	de bf       	out	0x3e, r29	; 62
 760:	0f be       	out	0x3f, r0	; 63
 762:	cd bf       	out	0x3d, r28	; 61
	int temp, hum; 
	char bufor[10];
	dhtxxconvert( DHTXX_DHT11, &PORTD, &DDRD, &PIND, ( 1 << 2 ) );
 764:	04 e0       	ldi	r16, 0x04	; 4
 766:	29 e2       	ldi	r18, 0x29	; 41
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	4a e2       	ldi	r20, 0x2A	; 42
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	6b e2       	ldi	r22, 0x2B	; 43
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 79 01 	call	0x2f2	; 0x2f2 <dhtxxconvert>
 778:	2f ef       	ldi	r18, 0xFF	; 255
 77a:	83 ed       	ldi	r24, 0xD3	; 211
 77c:	90 e3       	ldi	r25, 0x30	; 48
 77e:	21 50       	subi	r18, 0x01	; 1
 780:	80 40       	sbci	r24, 0x00	; 0
 782:	90 40       	sbci	r25, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <weatherStation+0x3a>
 786:	00 c0       	rjmp	.+0      	; 0x788 <weatherStation+0x44>
 788:	00 00       	nop
	_delay_ms(1000);
	dhtxxread( DHTXX_DHT11, &PORTD, &DDRD, &PIND, ( 1 << 2 ), &temp, &hum );
 78a:	ce 01       	movw	r24, r28
 78c:	03 96       	adiw	r24, 0x03	; 3
 78e:	6c 01       	movw	r12, r24
 790:	02 97       	sbiw	r24, 0x02	; 2
 792:	7c 01       	movw	r14, r24
 794:	29 e2       	ldi	r18, 0x29	; 41
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	4a e2       	ldi	r20, 0x2A	; 42
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	6b e2       	ldi	r22, 0x2B	; 43
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	0e 94 94 00 	call	0x128	; 0x128 <dhtxxread>
	
	lcd_clrscr();
 7a6:	0e 94 3f 02 	call	0x47e	; 0x47e <lcd_clrscr>
	lcd_puts("Temp: ");
 7aa:	8f e2       	ldi	r24, 0x2F	; 47
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	itoa(temp/10, bufor, 10);
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	9a 81       	ldd	r25, Y+2	; 0x02
 7b6:	0a e0       	ldi	r16, 0x0A	; 10
 7b8:	10 e0       	ldi	r17, 0x00	; 0
 7ba:	b8 01       	movw	r22, r16
 7bc:	0e 94 31 04 	call	0x862	; 0x862 <__divmodhi4>
 7c0:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7c2:	4a e0       	ldi	r20, 0x0A	; 10
 7c4:	be 01       	movw	r22, r28
 7c6:	6b 5f       	subi	r22, 0xFB	; 251
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__itoa_ncheck>
	lcd_puts(bufor);
 7ce:	ce 01       	movw	r24, r28
 7d0:	05 96       	adiw	r24, 0x05	; 5
 7d2:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	lcd_puts(" C");
 7d6:	86 e3       	ldi	r24, 0x36	; 54
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	
	itoa(hum/10, bufor,10);
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	b8 01       	movw	r22, r16
 7e4:	0e 94 31 04 	call	0x862	; 0x862 <__divmodhi4>
 7e8:	cb 01       	movw	r24, r22
 7ea:	4a e0       	ldi	r20, 0x0A	; 10
 7ec:	be 01       	movw	r22, r28
 7ee:	6b 5f       	subi	r22, 0xFB	; 251
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__itoa_ncheck>
	lcd_goto(64);
 7f6:	80 e4       	ldi	r24, 0x40	; 64
 7f8:	0e 94 3b 02 	call	0x476	; 0x476 <lcd_goto>
	lcd_puts("Wilg: ");
 7fc:	89 e3       	ldi	r24, 0x39	; 57
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	lcd_puts(bufor);
 804:	ce 01       	movw	r24, r28
 806:	05 96       	adiw	r24, 0x05	; 5
 808:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	lcd_puts(" %");
 80c:	80 e4       	ldi	r24, 0x40	; 64
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puts>
	checkHumAndTemperature(hum, temp);
 814:	69 81       	ldd	r22, Y+1	; 0x01
 816:	7a 81       	ldd	r23, Y+2	; 0x02
 818:	8b 81       	ldd	r24, Y+3	; 0x03
 81a:	9c 81       	ldd	r25, Y+4	; 0x04
 81c:	0e 94 55 03 	call	0x6aa	; 0x6aa <checkHumAndTemperature>
}
 820:	2e 96       	adiw	r28, 0x0e	; 14
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	f8 94       	cli
 826:	de bf       	out	0x3e, r29	; 62
 828:	0f be       	out	0x3f, r0	; 63
 82a:	cd bf       	out	0x3d, r28	; 61
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	df 90       	pop	r13
 83a:	cf 90       	pop	r12
 83c:	08 95       	ret

0000083e <main>:



int main(void)
{
	DDRD = 0x30;
 83e:	80 e3       	ldi	r24, 0x30	; 48
 840:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<3);
 842:	8a b1       	in	r24, 0x0a	; 10
 844:	87 7f       	andi	r24, 0xF7	; 247
 846:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<3);
 848:	8b b1       	in	r24, 0x0b	; 11
 84a:	88 60       	ori	r24, 0x08	; 8
 84c:	8b b9       	out	0x0b, r24	; 11
	
	lcd_init();
 84e:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_init>
    while(1){		
		
		if (PIND & (1<<3))
 852:	4b 9b       	sbis	0x09, 3	; 9
 854:	03 c0       	rjmp	.+6      	; 0x85c <main+0x1e>
		{
			weatherStation();
 856:	0e 94 a2 03 	call	0x744	; 0x744 <weatherStation>
 85a:	fb cf       	rjmp	.-10     	; 0x852 <main+0x14>
		}else{
			bodyTemperature();
 85c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <bodyTemperature>
 860:	f8 cf       	rjmp	.-16     	; 0x852 <main+0x14>

00000862 <__divmodhi4>:
 862:	97 fb       	bst	r25, 7
 864:	07 2e       	mov	r0, r23
 866:	16 f4       	brtc	.+4      	; 0x86c <__divmodhi4+0xa>
 868:	00 94       	com	r0
 86a:	07 d0       	rcall	.+14     	; 0x87a <__divmodhi4_neg1>
 86c:	77 fd       	sbrc	r23, 7
 86e:	09 d0       	rcall	.+18     	; 0x882 <__divmodhi4_neg2>
 870:	0e 94 45 04 	call	0x88a	; 0x88a <__udivmodhi4>
 874:	07 fc       	sbrc	r0, 7
 876:	05 d0       	rcall	.+10     	; 0x882 <__divmodhi4_neg2>
 878:	3e f4       	brtc	.+14     	; 0x888 <__divmodhi4_exit>

0000087a <__divmodhi4_neg1>:
 87a:	90 95       	com	r25
 87c:	81 95       	neg	r24
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__divmodhi4_neg2>:
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255

00000888 <__divmodhi4_exit>:
 888:	08 95       	ret

0000088a <__udivmodhi4>:
 88a:	aa 1b       	sub	r26, r26
 88c:	bb 1b       	sub	r27, r27
 88e:	51 e1       	ldi	r21, 0x11	; 17
 890:	07 c0       	rjmp	.+14     	; 0x8a0 <__udivmodhi4_ep>

00000892 <__udivmodhi4_loop>:
 892:	aa 1f       	adc	r26, r26
 894:	bb 1f       	adc	r27, r27
 896:	a6 17       	cp	r26, r22
 898:	b7 07       	cpc	r27, r23
 89a:	10 f0       	brcs	.+4      	; 0x8a0 <__udivmodhi4_ep>
 89c:	a6 1b       	sub	r26, r22
 89e:	b7 0b       	sbc	r27, r23

000008a0 <__udivmodhi4_ep>:
 8a0:	88 1f       	adc	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	5a 95       	dec	r21
 8a6:	a9 f7       	brne	.-22     	; 0x892 <__udivmodhi4_loop>
 8a8:	80 95       	com	r24
 8aa:	90 95       	com	r25
 8ac:	bc 01       	movw	r22, r24
 8ae:	cd 01       	movw	r24, r26
 8b0:	08 95       	ret

000008b2 <__itoa_ncheck>:
 8b2:	bb 27       	eor	r27, r27
 8b4:	4a 30       	cpi	r20, 0x0A	; 10
 8b6:	31 f4       	brne	.+12     	; 0x8c4 <__itoa_ncheck+0x12>
 8b8:	99 23       	and	r25, r25
 8ba:	22 f4       	brpl	.+8      	; 0x8c4 <__itoa_ncheck+0x12>
 8bc:	bd e2       	ldi	r27, 0x2D	; 45
 8be:	90 95       	com	r25
 8c0:	81 95       	neg	r24
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__utoa_common>

000008c8 <__utoa_ncheck>:
 8c8:	bb 27       	eor	r27, r27

000008ca <__utoa_common>:
 8ca:	fb 01       	movw	r30, r22
 8cc:	55 27       	eor	r21, r21
 8ce:	aa 27       	eor	r26, r26
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	aa 1f       	adc	r26, r26
 8d6:	a4 17       	cp	r26, r20
 8d8:	10 f0       	brcs	.+4      	; 0x8de <__utoa_common+0x14>
 8da:	a4 1b       	sub	r26, r20
 8dc:	83 95       	inc	r24
 8de:	50 51       	subi	r21, 0x10	; 16
 8e0:	b9 f7       	brne	.-18     	; 0x8d0 <__utoa_common+0x6>
 8e2:	a0 5d       	subi	r26, 0xD0	; 208
 8e4:	aa 33       	cpi	r26, 0x3A	; 58
 8e6:	08 f0       	brcs	.+2      	; 0x8ea <__utoa_common+0x20>
 8e8:	a9 5d       	subi	r26, 0xD9	; 217
 8ea:	a1 93       	st	Z+, r26
 8ec:	00 97       	sbiw	r24, 0x00	; 0
 8ee:	79 f7       	brne	.-34     	; 0x8ce <__utoa_common+0x4>
 8f0:	b1 11       	cpse	r27, r1
 8f2:	b1 93       	st	Z+, r27
 8f4:	11 92       	st	Z+, r1
 8f6:	cb 01       	movw	r24, r22
 8f8:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <strrev>

000008fc <strrev>:
 8fc:	dc 01       	movw	r26, r24
 8fe:	fc 01       	movw	r30, r24
 900:	67 2f       	mov	r22, r23
 902:	71 91       	ld	r23, Z+
 904:	77 23       	and	r23, r23
 906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0x1>
 908:	32 97       	sbiw	r30, 0x02	; 2
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
 90c:	7c 91       	ld	r23, X
 90e:	6d 93       	st	X+, r22
 910:	70 83       	st	Z, r23
 912:	62 91       	ld	r22, -Z
 914:	ae 17       	cp	r26, r30
 916:	bf 07       	cpc	r27, r31
 918:	c8 f3       	brcs	.-14     	; 0x90c <__stack+0xd>
 91a:	08 95       	ret

0000091c <_exit>:
 91c:	f8 94       	cli

0000091e <__stop_program>:
 91e:	ff cf       	rjmp	.-2      	; 0x91e <__stop_program>
